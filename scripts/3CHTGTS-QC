#!/bin/bash

## 3CHTGTS-QC
## Copyright (c) 2020 
## Author(s): Ranran Dai
## Contact: dairrsmu@163.com
## This script is used for quality control of raw data.
## See the LICENCE file for details


SOFT='3CHTGTS-QC'
VERSION='1.0.0'

## usage 
function usage (){
        echo -e "Usage : $SOFT -i INPUTDIR -o OUTPUTDIR -c CONFIG [-h] [-v]"
        echo -e "Usage option -h|--help for more information"
}

## function help
function help {
        echo
        echo "$SOFT $VERSION"
        echo "--------------"
        echo "OPTIONS"
        echo
        echo -e "\t\t -i|--input INPUTDIR : input rawdata directory; Suffix of file: fastq, fastq.gz, fq, fq.gz;"
        echo -e "\t\t -o|--output OUTPUTDIR : output directory;"
	echo -e "\t\t -c|--config CONFIG : config file;"
        echo -e "\t\t [-h|--help] : help;"
        echo -e "\t\t [-v|--version] : version"
        echo "--------------"
        echo "Example:"
        echo -e "\t\t  $SOFT -i INPUTDIR -o OUTPUTDIR -c CONFIG"
        echo	
        exit;
}

function version {
	echo -e "$SOFT version $VERSION"
	exit;
}

function opts_error {
	echo -e "Error : invalid parameters !" >&2
	echo -e "Use $SOFT -h for help"
	exit;
}

#####################
## Inputs
#####################
if [ $# -lt 1 ]
then
    usage
    exit
fi

## Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--input") set -- "$@" "-i" ;;
      "--output") set -- "$@" "-o" ;;
      "--config") set -- "$@" "-c" ;;
      "--help")   set -- "$@" "-h" ;;
      "--version")   set -- "$@" "-v" ;;
      *)        set -- "$@" "$arg"
  esac
done


while getopts ":i:o:c:vh" OPT
do
    case $OPT in
        i) INPUTDIR="$OPTARG";;
        o) OUTPUTDIR="$OPTARG";;
	c) CONFIG="$OPTARG";;
        v) version ;;
        h) help ;;
        \?)
             echo "Invalid option: -$OPTARG" >&2
             usage
             exit 1
             ;;
         :)
             echo "Option -$OPTARG requires an argument." >&2
             usage
             exit 1
             ;;
    esac
done

if [[ -z "$INPUTDIR" || -z "$OUTPUTDIR" || -z "$CONFIG" ]]; then
    usage
    exit
fi


echo -e "Input Directory : "$INPUTDIR
echo -e "Output Directory : "$OUTPUTDIR
echo -e "Config File : "$CONFIG


###################
## Run 3CHTGTS-QC
###################
mkdir -p $OUTPUTDIR
Thread=6

## Reverse Primer fasta for fastp
NestedPrimer=`grep "NestedPrimer" $CONFIG | tr -d  " " | awk -F "=" '{print $2}'`
AdapterPrimer=`grep "AdapterPrimer" $CONFIG | tr -d " " | awk -F "=" '{print $2}'`

echo -e "> NestedPrimer\n"$NestedPrimer > $OUTPUTDIR/Primer.fa
echo -e "> AdapterPrimer\n"$AdapterPrimer >> $OUTPUTDIR/Primer.fa

seqtk seq -r $OUTPUTDIR/Primer.fa > $OUTPUTDIR/Primer_rev.fa

## Determine the suffix of fastq file
Suffix=`basename $(ls -d $INPUTDIR/*/*1.{fastq,fq,fq.gz,fastq.gz} 2>/dev/null | head -n 1) | cut -d . -f 2-`
case $Suffix in
fastq | fastq.gz | fq | fq.gz)
	echo -e "fastq file formate is right" ;;
\?)
	echo -e "fastq file is wrong"
	help
	exit 1 ;;
esac

## List paired-end reads 
ls $INPUTDIR/*/*1.${Suffix} > $OUTPUTDIR/R1.list
ls $INPUTDIR/*/*2.${Suffix} > $OUTPUTDIR/R2.list

## Check reads where the Nested Primer is located, and redefind the reads that contain Nested Primer as R1
Pre_R1=`head -n 1 $OUTPUTDIR/R1.list`
case $Suffix in
fastq.gz | fq.gz)
	zcat $Pre_R1 | head -n 4000 > test.fq;;
fastq | fq )
	head -n 4000 $Pre_R1  > test.fq;;
esac

echo -e "Pre_R1:"$Pre_R1
echo -e "NestedPrimer:"$NestedPrimer
Pre_R1_L=`grep $NestedPrimer test.fq| wc -l`
echo -e "Pre_R1_L:"$Pre_R1_L


if [ $Pre_R1_L -gt 700 ]
then 
	paste -d , $OUTPUTDIR/R1.list $OUTPUTDIR/R2.list > $OUTPUTDIR/R1_R2.list
else
	paste -d , $OUTPUTDIR/R2.list $OUTPUTDIR/R1.list > $OUTPUTDIR/R1_R2.list
fi

## Main function
while read P
do
        R1=`echo $P |cut -d , -f 1`
        R2=`echo $P |cut -d , -f 2`
        DIR=`echo ${R1##*/}|cut -d _ -f 1`
        mkdir -p $OUTPUTDIR/$DIR
        fastp -w $Thread -5 -W 4 --detect_adapter_for_pe --adapter_fasta $OUTPUTDIR/Primer_rev.fa \
                -i $R1 -o $OUTPUTDIR/$DIR/${DIR}_R1.fastq -I $R2 -O $OUTPUTDIR/$DIR/${DIR}_R2.fastq \
                -j $OUTPUTDIR/$DIR/${DIR}.fastp.json \
		-h $OUTPUTDIR/$DIR/${DIR}.fastp.html 2> $OUTPUTDIR/$DIR/${DIR}.log
done < $OUTPUTDIR/R1_R2.list

